(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{478:function(e,t,a){"use strict";a.r(t);var n=a(2),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"day-2-mysql-relationships-many-to-many"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#day-2-mysql-relationships-many-to-many"}},[e._v("#")]),e._v(" Day 2 - MYSQL RELATIONSHIPS (MANY-TO-MANY)")]),e._v(" "),a("h2",{attrs:{id:"daily-journal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#daily-journal"}},[e._v("#")]),e._v(" Daily Journal")]),e._v(" "),a("p",[e._v("This is kind of a weird one...")]),e._v(" "),a("p",[e._v("I get that we're meant to be working on Many-to-Many relationships, but I couldn't help but think about the project we worked on last week, involving Recipes and Ingredients (or in my case, Spells and Components).")]),e._v(" "),a("p",[e._v("I remember running into trouble with that project, since I had built it thinking we would have single ingredients represented in multiple recipes. Needless to say, that proved rather difficult, as SQL doesn't manage MTM relationships through sub-documents, but sub-tables.")]),e._v(" "),a("p",[e._v("In the end, I needed to built each Ingredient with the Id of the Recipe that it was tied to, which didn't sit well with me as it was very limited.")]),e._v(" "),a("p",[e._v("So today, I rebuilt that program with MTM relationships in mind, and Lo and Behold the whole thing worked exactly how I thought it should have from the beginning! I might even pull some bits of that for The Tavern...")]),e._v(" "),a("h2",{attrs:{id:"daily-challenges"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#daily-challenges"}},[e._v("#")]),e._v(" Daily Challenges")]),e._v(" "),a("p",[e._v("Morning:")]),e._v(" "),a("p",[e._v("Afternoon: https://github.com/SamLimpic/cs-all-spell")]),e._v(" "),a("h3",{attrs:{id:"read-dotnet-webapi-s-relationships"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-dotnet-webapi-s-relationships"}},[e._v("#")]),e._v(' Read "Dotnet WebAPI\'s > Relationships"')]),e._v(" "),a("ol",[a("li",[a("p",[e._v("What is the difference between a primary key and a foreign key\nPrimary Keys are used to identify the item they are a property of, as a means to differentiate them from the other items in a table.\nForeign Keys are used to reference a related property from another item in another table.")])]),e._v(" "),a("li",[a("p",[e._v("What is an Alias?\nA means to condense your SQL statements by abbreviating the variable name with a single character as a reference point.")])]),e._v(" "),a("li",[a("p",[e._v("Demonstrate how you would query a join statement that would get all of a doctors patients from the following collections:")])])]),e._v(" "),a("p",[e._v("CREATE TABLE doctors (\nid INT NOT NULL AUTO_INCREMENT,\n-- CODE OMITTED\nPRIMARY KEY (id)\n)")]),e._v(" "),a("p",[e._v("CREATE TABLE patients (\nid INT NOT NULL AUTO_INCREMENT,\n-- CODE OMITTED\nPRIMARY KEY (id)\n)")]),e._v(" "),a("p",[e._v("CREATE TABLE doctors (\nid INT NOT NULL AUTO_INCREMENT,\ndoctorId INT NOT NULL,\npatientId INT NOT NULL,")]),e._v(" "),a("p",[e._v("FOREIGN KEY (doctorId)\nREFERENCES doctors(id),\nFOREIGN KEY (patientId)\nREFERENCES patients(id),\n)")]),e._v(" "),a("p",[e._v("SELECT\np."),a("em",[e._v(",\nd.")]),e._v("\nFROM patients p\nJOIN doctors d ON p.doctorId = d.id\nWHERE\np.id = @id")])])}),[],!1,null,null,null);t.default=i.exports}}]);